
package CoffeeShop;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class CustomerUI extends javax.swing.JFrame {

    Menu menu;
    ArrayList<MenuItem> list;
    private double cost;
    DefaultTableModel model;
    Date date;
    DateFormat df;
    OrderList orderList;
    Customer customer;
    MenuItem menuItem;
    Name name;
    /**
     * Creates new form Customer
     */
    public CustomerUI() {
        initComponents();
        menu = new Menu();
        menu.readMenuFile("menu.csv");
        customer = new Customer();
        customer.readCustomerFile("customer list.csv");
        model = (DefaultTableModel) menuItems.getModel();
        ButtonGroup group = new ButtonGroup();
        orderList = new OrderList();
        date = new Date();
        df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        group.add(categoryDessert);
        group.add(categoryDrinks);
        group.add(categoryMainCourse);
        group.add(categoryStarters);
        resetDiscount();
//        try {
//            //clearFile("C:/Users/uchea/Desktop/Drive/F21AS/CoffeeShop/resources/Current order.csv");
//            clearFile(System.getProperty("user.dir")+"\\resources\\Current order.csv");
//        } catch (FileNotFoundException ex) {}
    }
    
    private void resetDiscount(){
        cost = 0;
    }
    
    public void populateTable(String category)
    {
        model.setRowCount(0);
        list = menu.searchCategory(category);
        Object rowData[] = new Object[4];
        list.stream().map((list1) -> {
            rowData[0] = list1.getCategory();
            return list1;
        }).map((list1) -> {
            rowData[1] = list1.getItem();
            return list1;
        }).map((list1) -> {
            rowData[2] = list1.getCost();
            return list1;
        }).map((list1) -> {
            rowData[3] = list1.getId();
            return list1;
        }).forEach((_item) -> {
            model.addRow(rowData);
        });      
    }
    
    public void clearTable(){
        if(!list.isEmpty()){
        list.clear();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        makeOrder = new javax.swing.JButton();
        customerUIScrollPane = new javax.swing.JScrollPane();
        menuItems = new javax.swing.JTable();
        discountLabel = new javax.swing.JLabel();
        customerMenuSearchLabel = new javax.swing.JLabel();
        customerMenuSearch = new javax.swing.JTextField();
        categoriesLabel = new javax.swing.JLabel();
        categoryStarters = new javax.swing.JRadioButton();
        categoryMainCourse = new javax.swing.JRadioButton();
        categoryDessert = new javax.swing.JRadioButton();
        categoryDrinks = new javax.swing.JRadioButton();
        totalCostLabel = new javax.swing.JLabel();
        discount = new javax.swing.JTextField();
        totalCost = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayOrder = new javax.swing.JTextArea();
        search = new javax.swing.JButton();
        info = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        customerIDField = new javax.swing.JTextField();
        searchCustomerID = new javax.swing.JButton();
        customerLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Menu");
        setName("CustomerUI"); // NOI18N
        setResizable(false);

        makeOrder.setText("Order");
        makeOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeOrderActionPerformed(evt);
            }
        });

        menuItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Category", "Description", "Price Per Item", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        menuItems.setColumnSelectionAllowed(true);
        menuItems.getTableHeader().setReorderingAllowed(false);
        menuItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuItemsMouseClicked(evt);
            }
        });
        customerUIScrollPane.setViewportView(menuItems);
        menuItems.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (menuItems.getColumnModel().getColumnCount() > 0) {
            menuItems.getColumnModel().getColumn(0).setResizable(false);
            menuItems.getColumnModel().getColumn(1).setResizable(false);
            menuItems.getColumnModel().getColumn(2).setResizable(false);
            menuItems.getColumnModel().getColumn(3).setResizable(false);
        }

        discountLabel.setText("Discount");

        customerMenuSearchLabel.setText("Search item");

        categoriesLabel.setText("Categories");

        categoryStarters.setText("Starters");
        categoryStarters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryStartersActionPerformed(evt);
            }
        });

        categoryMainCourse.setText("Main Course");
        categoryMainCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryMainCourseActionPerformed(evt);
            }
        });

        categoryDessert.setText("Dessert");
        categoryDessert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryDessertActionPerformed(evt);
            }
        });

        categoryDrinks.setText("Drinks");
        categoryDrinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryDrinksActionPerformed(evt);
            }
        });

        totalCostLabel.setText("Total");

        discount.setEditable(false);
        discount.setText("0");

        totalCost.setEditable(false);
        totalCost.setText("0");

        displayOrder.setEditable(false);
        displayOrder.setColumns(20);
        displayOrder.setRows(5);
        jScrollPane1.setViewportView(displayOrder);

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        info.setText("Select category and select order ID");

        jLabel1.setText("Customer ID");

        searchCustomerID.setText("Search");
        searchCustomerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCustomerIDActionPerformed(evt);
            }
        });

        customerLabel.setText("Welcome");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(makeOrder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(customerUIScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(totalCostLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(categoriesLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(categoryStarters)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(categoryMainCourse)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(categoryDessert)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(categoryDrinks))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(customerMenuSearchLabel)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(customerMenuSearch)
                                    .addComponent(customerIDField, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(searchCustomerID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                            .addComponent(customerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(discountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalCost, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(discount)))
                    .addComponent(info, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(customerMenuSearch)
                        .addComponent(search)
                        .addComponent(customerLabel))
                    .addComponent(customerMenuSearchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(customerIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchCustomerID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(categoryStarters)
                            .addComponent(categoryMainCourse)
                            .addComponent(categoryDessert)
                            .addComponent(categoryDrinks)
                            .addComponent(categoriesLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customerUIScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(discountLabel)
                    .addComponent(discount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(totalCostLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalCost, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(makeOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(info)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void makeOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeOrderActionPerformed
        // TODO add your handling code here:
        if(menuItem!=null&&name!=null){
            
            Object[] options = {"Yes", "No"};
                    int n = JOptionPane.showOptionDialog(null, "Confirm order?", null, JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
                    if(n == JOptionPane.YES_OPTION){
                        try {
//                            copyFile("C:/Users/uchea/Desktop/Drive/F21AS/CoffeeShop/resources/temp.csv",
//                            "C:/Users/uchea/Desktop/Drive/F21AS/CoffeeShop/resources/order list.csv");
//                            copyFile("C:/Users/uchea/Desktop/Drive/F21AS/CoffeeShop/resources/temp.csv",
//                            "C:/Users/uchea/Desktop/Drive/F21AS/CoffeeShop/resources/Current order.csv");
//                            clearFile("C:/Users/uchea/Desktop/Drive/F21AS/CoffeeShop/resources/temp.csv");
//                            
                            
                            copyFile(System.getProperty("user.dir")+"\\resources\\temp.csv",
                            System.getProperty("user.dir")+"\\resources\\order list.csv");
                            copyFile(System.getProperty("user.dir")+"\\resources\\temp.csv",
                            System.getProperty("user.dir")+"\\resources\\Current order.csv");
                            clearFile(System.getProperty("user.dir")+"\\resources\\temp.csv");
                            clearOrderDetails();
                        } catch (IOException ex) {} 
                    }
           
        }
        else{
           info.setForeground(Color.red);
           info.setText("Select Order ID or enter customer ID"); 
        }
    }//GEN-LAST:event_makeOrderActionPerformed

    private void categoryStartersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryStartersActionPerformed
        // TODO add your handling code here:
        populateTable("Starters");
    }//GEN-LAST:event_categoryStartersActionPerformed

    private void categoryMainCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryMainCourseActionPerformed
        // TODO add your handling code here:
        populateTable("Main Course");
    }//GEN-LAST:event_categoryMainCourseActionPerformed

    private void categoryDessertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryDessertActionPerformed
        // TODO add your handling code here:
        populateTable("Desserts");
    }//GEN-LAST:event_categoryDessertActionPerformed

    private void categoryDrinksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryDrinksActionPerformed
        // TODO add your handling code here:
        populateTable("Drinks");
    }//GEN-LAST:event_categoryDrinksActionPerformed

    public void clearOrderDetails(){
        totalCost.setText("");
                discount.setText("");
                info.setForeground(Color.black);
                info.setText("Select category and select order ID");
                customerMenuSearch.setText("");
                menuItem = null;
                name = null;
                resetDiscount();
                customerLabel.setText("Wecome ");
                customerIDField.setText("");
                displayOrder.setText("");
    }
    
    private void menuItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuItemsMouseClicked
        // TODO add your handling code here:

        int row = menuItems.rowAtPoint(evt.getPoint());
        int col = menuItems.columnAtPoint(evt.getPoint());
        if (row >= 0 && col >= 0) {
            menuItems.getValueAt(row, col).toString();
            menuItem = menu.searchID(menuItems.getValueAt(row, col).toString());
            if(menuItem!=null&&name!=null){
                displayOrder.append(menuItem.getItem()+"\t"+menuItem.getCost()+"\n");
                String order = name.getId()+","+menuItem.getId()+","+menuItem.getItem()+","+menuItem.getCost()+","+ df.format(date)+"\n";
                orderList.writeToFile("temp.csv", order);
                totalCost(menuItem.getCost());
                totalCost.setText(String.valueOf(cost));
                discount.setText(String.valueOf(discount()));
                info.setForeground(Color.black);
                info.setText("Select category and select order ID");
            }
            else{
                info.setForeground(Color.red);
                info.setText("Select Order ID or enter customer ID");
            }
        }
    }//GEN-LAST:event_menuItemsMouseClicked

    public void copyFile(String file, String copy) throws IOException {
            BufferedReader inputStream = new BufferedReader(new FileReader(file));
            File UIFile = new File(copy);
            FileWriter filewriter = new FileWriter(UIFile.getAbsoluteFile(),true);
            BufferedWriter outputStream= new BufferedWriter(filewriter);
            String count;
                while ((count = inputStream.readLine()) != null) {
                    outputStream.write(count+"\n");
                    }
           outputStream.flush();
           outputStream.close();
           inputStream.close();
    }
    
    private void clearFile(String file) throws FileNotFoundException{
        try (PrintWriter writer = new PrintWriter(file)) {
            //writer.print("");
        }
    }
    
    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
        info.setForeground(Color.black);
        info.setText("Select category and select order ID");
        if(!customerMenuSearch.getText().trim().isEmpty()){
        MenuItem m = menu.searchItem(customerMenuSearch.getText().trim());
            if(m!=null){
                model.setRowCount(0);
                Object rowData[] = new Object[4];
                rowData[0] = m.getCategory();
                rowData[1] = m.getItem();
                rowData[2] = m.getCost();
                rowData[3] = m.getId();
                model.addRow(rowData);
        }
            else{
                info.setForeground(Color.red);
                info.setText("Item not found");
        }
        }
        else{
            info.setForeground(Color.red);
            info.setText("Input item");
        }
    }//GEN-LAST:event_searchActionPerformed

    private void searchCustomerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerIDActionPerformed
        // TODO add your handling code here:
        if(!customerIDField.getText().trim().isEmpty()&&validateNumber(customerIDField.getText().trim())){
            if(customer.searchID(Integer.parseInt(customerIDField.getText().trim()))!=null){
                name = customer.searchID(Integer.parseInt(customerIDField.getText().trim()));
                customerLabel.setForeground(Color.black);
                customerLabel.setText("Wecome "+name.getName());
            }
            else{
                customerLabel.setForeground(Color.red);
                customerLabel.setText("ID not valid");
            }
        }
        else{
            customerLabel.setForeground(Color.red);
            customerLabel.setText("Enter proper customer ID");
        }
    }//GEN-LAST:event_searchCustomerIDActionPerformed

    private boolean validateNumber(String s) {
        Scanner scanner = new Scanner(s);
        int number;
            do {
                while (!scanner.hasNextInt()) {
                scanner.next();
                return false;
                }
            number = scanner.nextInt();
                } while (number < 0);
            return true;
    }
    
    private double totalCost(double cost){ 
        return this.cost += cost;
    }
    
    private double discount(){
        if(cost >= 100.00){
            return cost-(0.2*cost);
        }
        return 0.0;
    }
    

    public void showGUI() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel categoriesLabel;
    private javax.swing.JRadioButton categoryDessert;
    private javax.swing.JRadioButton categoryDrinks;
    private javax.swing.JRadioButton categoryMainCourse;
    private javax.swing.JRadioButton categoryStarters;
    private javax.swing.JTextField customerIDField;
    private javax.swing.JLabel customerLabel;
    private javax.swing.JTextField customerMenuSearch;
    private javax.swing.JLabel customerMenuSearchLabel;
    private javax.swing.JScrollPane customerUIScrollPane;
    private javax.swing.JTextField discount;
    private javax.swing.JLabel discountLabel;
    private javax.swing.JTextArea displayOrder;
    private javax.swing.JLabel info;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton makeOrder;
    private javax.swing.JTable menuItems;
    private javax.swing.JButton search;
    private javax.swing.JButton searchCustomerID;
    private javax.swing.JTextField totalCost;
    private javax.swing.JLabel totalCostLabel;
    // End of variables declaration//GEN-END:variables
}
